#include "Riostream.h"

void MakerawTTree(const char* ascii_input, const char* root_output) {
  std::ifstream infile;
  infile.open(ascii_input);

  Int_t EvtNum, AddNum,  WrAddNum;
  Int_t Wctime, ASIC,    Channel;
  Int_t PeakTime[16], PeakVal[16], Sample[16][128];

  TFile* file = new TFile(root_output,"UPDATE");
  TTree* tree = new TTree("tree","Raw TargetX output");

  tree->Branch("EvtNum", &EvtNum, "EvtNum/I");
  tree->Branch("AddNum", &AddNum, "AddNum/I");
  tree->Branch("WrAddNum", &WrAddNum, "WrAddNum/I");
  tree->Branch("Wctime", &Wctime, "Wctime/I");
  tree->Branch("ASIC", &ASIC, "ASIC/I");
  tree->Branch("PeakTime", PeakTime, "PeakTime[16]/I");
  tree->Branch("PeakVal", PeakVal, "PeakVal[16]/I");
  tree->Branch("ADC_counts", Sample, "ADC_counts[16][128]/I");

  Int_t nlines = 0;

  while (1) { // loops intil break is reached
    infile >>      EvtNum      ;
    infile >>      AddNum      ;
    infile >>      WrAddNum    ;
    infile >>      Wctime      ;
    infile >>      ASIC        ;
    for (int i=0; i<16; i++) {
      infile >>  PeakTime[i] ;
      infile >>  PeakVal[i]  ;
      for (int j=0; j<128; j++) infile >> Sample[i][j];
    }
      // exit loop when eof, fail, or bad bit from std::ios is set.
      if (!infile.good()) break;
      tree->Fill();
      nlines++;
  }
  printf("Read %d lines.\n",nlines);
  infile.close();
  tree->Write();
  file->Close();
  delete file;
}
